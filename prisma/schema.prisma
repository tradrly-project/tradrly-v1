// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  username  String
  email     String   @unique
  password  String?
  image     String?
  role      String   @default("User")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  journals      Journal[]
  psychologies  UserPsychology[]
  subscriptions Subscription[]
  payments      Payment[]
  accounts      Account[]
  pairs         UserPair[]
  strategy      userStrategy[]
  setupTrades   SetupTrade[]
  indicators    UserIndicator[]
  timeframes    UserTimeframe[]
}

model Account {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  brokerName     String
  accountNumber  String
  server         String?
  initialBalance Decimal
  note           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model SetupTrade {
  id        String   @id @default(uuid())
  userId    String
  name      String
  strategy  String
  winrate   Float?   @default(0)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategies userStrategy[]
  journals   Journal[]
  indicators UserIndicator[]
  timeframes UserTimeframe[]

  @@index([userId])
}

model Journal {
  id            String         @id @default(uuid())
  userId        String
  pairId        String
  setupTradeId  String?
  direction     TradeDirection
  entryPrice    Decimal
  stoploss      Decimal
  takeProfit    Decimal
  lotSize       Decimal
  exitPrice     Decimal
  result        Result
  profitLoss    Decimal
  riskRatio     Decimal
  notes         String?
  screenshotUrl String?
  date          DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  pair         UserPair          @relation(fields: [pairId], references: [id])
  setupTrade   SetupTrade?       @relation(fields: [setupTradeId], references: [id])
  psychologies UserPsychology[]
  screenshots  TradeScreenshot[]

  @@index([userId])
}

model TradeScreenshot {
  id        String         @id @default(uuid())
  tradeId   String
  type      ScreenshotType
  url       String
  createdAt DateTime       @default(now())

  journal Journal @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@index([tradeId])
}

model Pair {
  id        String   @id @default(cuid())
  symbol    String   @unique
  type      TypePair
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userPairs UserPair[]
}

model UserPair {
  id         String   @id @default(cuid())
  userId     String
  pairId     String?
  customName String?
  customType String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  pair     Pair?     @relation(fields: [pairId], references: [id])
  journals Journal[]

  @@unique([userId, pairId])
}

model Psychology {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userPsychologies UserPsychology[]
}

model UserPsychology {
  id           String   @id @default(cuid())
  userId       String
  psychologyId String?
  customName   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  psychology Psychology? @relation(fields: [psychologyId], references: [id])
  journals   Journal[]

  @@unique([userId, psychologyId])
}

model Strategy {
  id           String         @id @default(uuid())
  name         String
  userStrategy userStrategy[]
}

model userStrategy {
  id         String   @id @default(uuid())
  userId     String
  strategyId String?
  customName String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategy    Strategy?    @relation(fields: [strategyId], references: [id])
  setupTrades SetupTrade[]

  @@unique([userId, strategyId])
}

model Indicator {
  id   String @id @default(uuid())
  name String
  code String @unique

  userIndicators UserIndicator[]
}

model UserIndicator {
  id          String   @id @default(cuid())
  userId      String
  indicatorId String?
  customCode  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  indicator Indicator?   @relation(fields: [indicatorId], references: [id])
  setups    SetupTrade[]

  @@unique([userId, indicatorId])
}

model Timeframe {
  id    String         @id @default(cuid())
  name  String         @unique
  group TimeFrameGroup

  UserTimeframe UserTimeframe[]
}

model UserTimeframe {
  id          String   @id @default(cuid())
  userId      String
  timeframeId String?
  customName  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeframe   Timeframe?   @relation(fields: [timeframeId], references: [id], onDelete: Cascade)
  setupTrades SetupTrade[]

  @@unique([userId, timeframeId]) // satu TF bisa di-override 1x per user
}

model Subscription {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  plan      SubscriptionPlan   @relation(fields: [planId], references: [id])
  planId    String
  status    SubscriptionStatus
  startedAt DateTime
  endsAt    DateTime
  paymentId String?

  @@index([userId])
}

model SubscriptionPlan {
  id        String           @id @default(uuid())
  name      String
  price     Decimal
  tier      SubscriptionTier
  features  Json?
  createdAt DateTime         @default(now())

  subscriptions Subscription[]
}

model Payment {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  amount        Decimal
  status        PaymentStatus
  paymentMethod String
  externalRef   String?
  createdAt     DateTime      @default(now())

  @@index([userId])
}

enum TypePair {
  forex
  crypto
  stock
  index
}

enum TimeFrameGroup {
  second
  minute
  hour
  dayweekmonth
}

enum SubscriptionStatus {
  active
  cancelled
  expired
}

enum SubscriptionTier {
  trial
  basic
  pro
  elite
}

enum PaymentStatus {
  pending
  paid
  failed
}

enum TradeDirection {
  buy
  sell
}

enum Result {
  win
  loss
  bep
}

enum ScreenshotType {
  BEFORE
  AFTER
}
