// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  username  String
  email     String   @unique
  password  String?
  image     String?
  role      String   @default("User")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trades        Trade[]
  tags          Psychology[]
  subscriptions Subscription[]
  payments      Payment[]
  accounts      Account[]
  pairs         Pair[]
  strategy      Strategy[]
  setupTrades   SetupTrade[]
  indicators    Indicator[]
}

model Account {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  brokerName     String
  accountNumber  String
  server         String?
  initialBalance Decimal
  note           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model SubscriptionPlan {
  id        String           @id @default(uuid())
  name      String
  price     Decimal
  tier      SubscriptionTier
  features  Json?
  createdAt DateTime         @default(now())

  subscriptions Subscription[]
}

model Subscription {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  plan      SubscriptionPlan   @relation(fields: [planId], references: [id])
  planId    String
  status    SubscriptionStatus
  startedAt DateTime
  endsAt    DateTime
  paymentId String?

  @@index([userId])
}

model Pair {
  id        String   @id @default(cuid())
  symbol    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Trade     Trade[]

  @@unique([symbol, userId])
}

model SetupTrade {
  id        String   @id @default(uuid())
  userId    String
  name      String
  strategy  String
  timeframe String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  indicators Indicator[] @relation("SetupTradeIndicators")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategies Strategy[]
  trades     Trade[]

  @@index([userId])
}

model Trade {
  id            String         @id @default(uuid())
  userId        String
  pairId        String
  setupTradeId  String?
  direction     TradeDirection
  entryPrice    Decimal
  stoploss      Decimal
  takeProfit    Decimal
  lotSize       Decimal
  exitPrice     Decimal
  result        Result
  profitLoss    Decimal
  riskRatio     Decimal
  notes         String?
  screenshotUrl String?
  date          DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pair         Pair         @relation(fields: [pairId], references: [id])
  setupTrade   SetupTrade?  @relation(fields: [setupTradeId], references: [id])
  psychologies Psychology[]

  @@index([userId])
}

model Psychology {
  id     String  @id @default(uuid())
  name   String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  trades Trade[]

  @@index([userId])
}

model Strategy {
  id          String       @id @default(uuid())
  name        String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  setupTrades SetupTrade[]
}

model Indicator {
  id     String @id @default(uuid())
  name   String
  code   String
  userId String

  setups SetupTrade[] @relation("SetupTradeIndicators")
  User   User         @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Payment {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  amount        Decimal
  status        PaymentStatus
  paymentMethod String
  externalRef   String?
  createdAt     DateTime      @default(now())

  @@index([userId])
}

enum SubscriptionStatus {
  active
  cancelled
  expired
}

enum PaymentStatus {
  pending
  paid
  failed
}

enum TradeDirection {
  buy
  sell
}

enum Result {
  win
  loss
  bep
}

enum SubscriptionTier {
  trial
  basic
  pro
  elite
}
