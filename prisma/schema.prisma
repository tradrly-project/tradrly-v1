// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  username  String
  email     String   @unique
  password  String?
  image     String?
  role      String   @default("User")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trades        Trade[]
  tags          Psychology[]
  subscriptions Subscription[]
  payments      Payment[]
  accounts      Account[]
  pairs         Pair[]
  strategy      Strategy[]
  setupTrades   SetupTrade[]
}

model Account {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  brokerName     String
  accountNumber  String
  server         String? // optional
  initialBalance Decimal
  note           String? // optional
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model SubscriptionPlan {
  id        String           @id @default(uuid())
  name      String
  price     Decimal
  tier      SubscriptionTier
  features  Json?
  createdAt DateTime         @default(now())

  subscriptions Subscription[]
}

model Subscription {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  plan      SubscriptionPlan   @relation(fields: [planId], references: [id])
  planId    String
  status    SubscriptionStatus
  startedAt DateTime
  endsAt    DateTime
  paymentId String?

  @@index([userId])
}

model Pair {
  id        String   @id @default(cuid())
  symbol    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  Trade     Trade[]

  setupPairs SetupTradePair[] // relasi ke pivot

  @@unique([symbol, userId])
}

model SetupTrade {
  id                String   @id @default(uuid())
  userId            String
  name              String
  strategy          String
  timeframe         String
  rrRatio           String
  appliesToAllPairs Boolean  @default(false)
  pairId            String?
  checklist         Json?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user           User             @relation(fields: [userId], references: [id])
  setupPairs     SetupTradePair[] // Pivot ke Pair
  checklistItems ChecklistItem[] // Daftar checklist
  strategies     Strategy[] // ✅ Many-to-many ke Strategy
  trades         Trade[] // Relasi kebalikan dari Trade.setupTrade

  @@index([userId])
}

model Trade {
  id            String         @id @default(uuid())
  userId        String
  pairId        String
  setupTradeId  String? // ✅ Foreign key ke SetupTrade (optional)
  direction     TradeDirection
  entryPrice    Decimal
  stoploss      Decimal
  takeProfit    Decimal
  lotSize       Decimal
  exitPrice     Decimal
  result        Result
  profitLoss    Decimal
  riskRatio     Decimal
  notes         String?
  screenshotUrl String?
  date          DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  pair         Pair         @relation(fields: [pairId], references: [id])
  setupTrade   SetupTrade?  @relation(fields: [setupTradeId], references: [id]) // ✅ baru
  psychologies Psychology[] // ✅ tetap many-to-many

  @@index([userId])
}

model SetupTradePair {
  setupTradeId String
  pairId       String

  setupTrade SetupTrade @relation(fields: [setupTradeId], references: [id])
  pair       Pair       @relation(fields: [pairId], references: [id])

  @@id([setupTradeId, pairId])
}

model ChecklistItem {
  id           String @id @default(uuid())
  name         String
  order        Int
  setupTradeId String

  setupTrade SetupTrade @relation(fields: [setupTradeId], references: [id])

  @@index([setupTradeId])
}

model Psychology {
  id     String  @id @default(uuid())
  name   String
  user   User    @relation(fields: [userId], references: [id])
  userId String
  trades Trade[] // ✅ many-to-many relasi balik

  @@index([userId])
}

model Strategy {
  id          String       @id @default(uuid())
  name        String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  setupTrades SetupTrade[] // ✅ Many-to-many ke SetupTrade
}

model Payment {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  amount        Decimal
  status        PaymentStatus
  paymentMethod String
  externalRef   String?
  createdAt     DateTime      @default(now())

  @@index([userId])
}

enum SubscriptionStatus {
  active
  cancelled
  expired
}

enum PaymentStatus {
  pending
  paid
  failed
}

enum TradeDirection {
  buy
  sell
}

enum Result {
  win
  loss
  bep
}

enum SubscriptionTier {
  trial
  basic
  pro
  elite
}
